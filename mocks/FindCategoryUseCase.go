// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	usecase "github.com/bells307/adv-service/internal/usecase"
	mock "github.com/stretchr/testify/mock"
)

// FindCategoryUseCase is an autogenerated mock type for the FindCategoryUseCase type
type FindCategoryUseCase struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *FindCategoryUseCase) Execute(_a0 context.Context, _a1 usecase.FindCategoryInput) (usecase.FindCategoryOutput, error) {
	ret := _m.Called(_a0, _a1)

	var r0 usecase.FindCategoryOutput
	if rf, ok := ret.Get(0).(func(context.Context, usecase.FindCategoryInput) usecase.FindCategoryOutput); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(usecase.FindCategoryOutput)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, usecase.FindCategoryInput) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFindCategoryUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewFindCategoryUseCase creates a new instance of FindCategoryUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFindCategoryUseCase(t mockConstructorTestingTNewFindCategoryUseCase) *FindCategoryUseCase {
	mock := &FindCategoryUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
